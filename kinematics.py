from math import sin, cos
# from math import atan2
import numpy as np

from scipy.optimize import fsolve

def inv_kinematic(pose:list, geometicParams = [57.0, 92.0, 11.0, 9.5, 70.0, 12.0]): 
    """Inverse kinematics of 6-RUS robot:
    
    `pose`: list with numeric content 

    `geometricParams`: geometric parameter of 6RUS-Robot given as list [l1, l2, dx, dy, Dx, Dy] (see documentation for more info)
    
    `return`: list with all six motor-angles"""

    # TODO: clean up this function
    # convert all inputs to floats to be able to work with complex numbers
    x = float(pose[0])
    y = float(pose[1])
    z = float(pose[2])
    alpha = float(pose[3])
    beta = float(pose[4])
    gamma = float(pose[5])

    # Check if custom geometric parameters were given
    if geometicParams is inv_kinematic.__defaults__[0]:
        print("WARNING! Default geometric parameters are selected. They may not match your 6-RUS Robot!")

    # Use given Robot dimensions
    l1 = geometicParams[0]
    l2 = geometicParams[1]
    dx = geometicParams[2]
    dy = geometicParams[3]
    Dx = geometicParams[4]
    Dy = geometicParams[5]

    j = complex(0, 1)  # define complex numer (0 + i)


    # TODO: manually implement the functions for theta 1-6 for possible time-optimisations
    # TEST for theta_1:
    # sig_4 = z + dx*(sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta)) + dy*(cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma))
    # sig_3 = Dx - x - dx*cos(beta)*cos(gamma) + dy*cos(beta)*sin(gamma)
    # sig_2 = sig_4**2 + sig_3**2 + (y - Dy + dx*(cos(alpha)*sin(gamma) + cos(gamma)*sin(alpha)*sin(beta)) + dy*(cos(alpha)*cos(gamma) - sin(alpha)*sin(beta)*sin(gamma)))**2 + l1**2 - l2**2
    # sig_1_squared = (sig_4**2 - (sig_2**2)/(4*l1**2) + sig_3**2)*sig_4**2
 
    # sig_1 = float(sig_1_squared)**0.5

    # yTeil = -(sig_1*sig_3 + (sig_4**2*sig_2)/(2*l1))/((sig_4**2 + sig_3**2)*sig_4)
    # xTeil = (sig_1 - (sig_3*sig_2)/(2*l1))/(sig_4**2 + sig_3**2)

    # theta_1_ = atan2(yTeil.real, xTeil.real)
    
    # calculate motor-angles
    theta_1 = np.angle(((((z + dx*(sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta)) + dy*(cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma)))**2 - ((z + dx*(sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta)) + dy*(cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma)))**2 + (Dx - x - dx*cos(beta)*cos(gamma) + dy*cos(beta)*sin(gamma))**2 + (y - Dy + dx*(cos(alpha)*sin(gamma) + cos(gamma)*sin(alpha)*sin(beta)) + dy*(cos(alpha)*cos(gamma) - sin(alpha)*sin(beta)*sin(gamma)))**2 + l1**2 - l2**2)**2/(4*l1**2) + (Dx - x - dx*cos(beta)*cos(gamma) + dy*cos(beta)*sin(gamma))**2)*(z + dx*(sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta)) + dy*(cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma)))**2)**(1/2) - ((Dx - x - dx*cos(beta)*cos(gamma) + dy*cos(beta)*sin(gamma))*((z + dx*(sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta)) + dy*(cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma)))**2 + (Dx - x - dx*cos(beta)*cos(gamma) + dy*cos(beta)*sin(gamma))**2 + (y - Dy + dx*(cos(alpha)*sin(gamma) + cos(gamma)*sin(alpha)*sin(beta)) + dy*(cos(alpha)*cos(gamma) - sin(alpha)*sin(beta)*sin(gamma)))**2 + l1**2 - l2**2))/(2*l1))/((z + dx*(sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta)) + dy*(cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma)))**2 + (Dx - x - dx*cos(beta)*cos(gamma) + dy*cos(beta)*sin(gamma))**2) - (((((z + dx*(sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta)) + dy*(cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma)))**2 - ((z + dx*(sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta)) + dy*(cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma)))**2 + (Dx - x - dx*cos(beta)*cos(gamma) + dy*cos(beta)*sin(gamma))**2 + (y - Dy + dx*(cos(alpha)*sin(gamma) + cos(gamma)*sin(alpha)*sin(beta)) + dy*(cos(alpha)*cos(gamma) - sin(alpha)*sin(beta)*sin(gamma)))**2 + l1**2 - l2**2)**2/(4*l1**2) + (Dx - x - dx*cos(beta)*cos(gamma) + dy*cos(beta)*sin(gamma))**2)*(z + dx*(sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta)) + dy*(cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma)))**2)**(1/2)*(Dx - x - dx*cos(beta)*cos(gamma) + dy*cos(beta)*sin(gamma)) + ((z + dx*(sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta)) + dy*(cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma)))**2*((z + dx*(sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta)) + dy*(cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma)))**2 + (Dx - x - dx*cos(beta)*cos(gamma) + dy*cos(beta)*sin(gamma))**2 + (y - Dy + dx*(cos(alpha)*sin(gamma) + cos(gamma)*sin(alpha)*sin(beta)) + dy*(cos(alpha)*cos(gamma) - sin(alpha)*sin(beta)*sin(gamma)))**2 + l1**2 - l2**2))/(2*l1))*j)/(((z + dx*(sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta)) + dy*(cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma)))**2 + (Dx - x - dx*cos(beta)*cos(gamma) + dy*cos(beta)*sin(gamma))**2)*(z + dx*(sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta)) + dy*(cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma)))))
    theta_2 = np.angle(((((z + dx*(sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta)) - dy*(cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma)))**2 - ((z + dx*(sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta)) - dy*(cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma)))**2 + (Dy + y + dx*(cos(alpha)*sin(gamma) + cos(gamma)*sin(alpha)*sin(beta)) - dy*(cos(alpha)*cos(gamma) - sin(alpha)*sin(beta)*sin(gamma)))**2 + (x - Dx + dx*cos(beta)*cos(gamma) + dy*cos(beta)*sin(gamma))**2 + l1**2 - l2**2)**2/(4*l1**2) + (x - Dx + dx*cos(beta)*cos(gamma) + dy*cos(beta)*sin(gamma))**2)*(z + dx*(sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta)) - dy*(cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma)))**2)**(1/2) + ((x - Dx + dx*cos(beta)*cos(gamma) + dy*cos(beta)*sin(gamma))*((z + dx*(sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta)) - dy*(cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma)))**2 + (Dy + y + dx*(cos(alpha)*sin(gamma) + cos(gamma)*sin(alpha)*sin(beta)) - dy*(cos(alpha)*cos(gamma) - sin(alpha)*sin(beta)*sin(gamma)))**2 + (x - Dx + dx*cos(beta)*cos(gamma) + dy*cos(beta)*sin(gamma))**2 + l1**2 - l2**2))/(2*l1))/((z + dx*(sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta)) - dy*(cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma)))**2 + (x - Dx + dx*cos(beta)*cos(gamma) + dy*cos(beta)*sin(gamma))**2) + (((((z + dx*(sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta)) - dy*(cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma)))**2 - ((z + dx*(sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta)) - dy*(cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma)))**2 + (Dy + y + dx*(cos(alpha)*sin(gamma) + cos(gamma)*sin(alpha)*sin(beta)) - dy*(cos(alpha)*cos(gamma) - sin(alpha)*sin(beta)*sin(gamma)))**2 + (x - Dx + dx*cos(beta)*cos(gamma) + dy*cos(beta)*sin(gamma))**2 + l1**2 - l2**2)**2/(4*l1**2) + (x - Dx + dx*cos(beta)*cos(gamma) + dy*cos(beta)*sin(gamma))**2)*(z + dx*(sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta)) - dy*(cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma)))**2)**(1/2)*(x - Dx + dx*cos(beta)*cos(gamma) + dy*cos(beta)*sin(gamma)) - ((z + dx*(sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta)) - dy*(cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma)))**2*((z + dx*(sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta)) - dy*(cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma)))**2 + (Dy + y + dx*(cos(alpha)*sin(gamma) + cos(gamma)*sin(alpha)*sin(beta)) - dy*(cos(alpha)*cos(gamma) - sin(alpha)*sin(beta)*sin(gamma)))**2 + (x - Dx + dx*cos(beta)*cos(gamma) + dy*cos(beta)*sin(gamma))**2 + l1**2 - l2**2))/(2*l1))*j)/(((z + dx*(sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta)) - dy*(cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma)))**2 + (x - Dx + dx*cos(beta)*cos(gamma) + dy*cos(beta)*sin(gamma))**2)*(z + dx*(sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta)) - dy*(cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma)))))
    theta_3 = np.angle((2*((((2*(cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma))*(dy/2 + (3**(1/2)*dx)/2) - 2*z + 2*(sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta))*(dx/2 - (3**(1/2)*dy)/2))**2 - (((cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma))*(dy/2 + (3**(1/2)*dx)/2) - z + (sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta))*(dx/2 - (3**(1/2)*dy)/2))**2 + (Dx/2 + x - (3**(1/2)*Dy)/2 - cos(beta)*cos(gamma)*(dx/2 - (3**(1/2)*dy)/2) + cos(beta)*sin(gamma)*(dy/2 + (3**(1/2)*dx)/2))**2 + (Dy/2 + y + (3**(1/2)*Dx)/2 - (cos(alpha)*sin(gamma) + cos(gamma)*sin(alpha)*sin(beta))*(dx/2 - (3**(1/2)*dy)/2) - (cos(alpha)*cos(gamma) - sin(alpha)*sin(beta)*sin(gamma))*(dy/2 + (3**(1/2)*dx)/2))**2 + l1**2 - l2**2)**2/l1**2 + (Dx/2 + x - (3**(1/2)*Dy)/2 + 3**(1/2)*(Dy/2 + y + (3**(1/2)*Dx)/2 - (cos(alpha)*sin(gamma) + cos(gamma)*sin(alpha)*sin(beta))*(dx/2 - (3**(1/2)*dy)/2) - (cos(alpha)*cos(gamma) - sin(alpha)*sin(beta)*sin(gamma))*(dy/2 + (3**(1/2)*dx)/2)) - cos(beta)*cos(gamma)*(dx/2 - (3**(1/2)*dy)/2) + cos(beta)*sin(gamma)*(dy/2 + (3**(1/2)*dx)/2))**2)*(2*(cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma))*(dy/2 + (3**(1/2)*dx)/2) - 2*z + 2*(sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta))*(dx/2 - (3**(1/2)*dy)/2))**2)/4)**(1/2) - ((((cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma))*(dy/2 + (3**(1/2)*dx)/2) - z + (sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta))*(dx/2 - (3**(1/2)*dy)/2))**2 + (Dx/2 + x - (3**(1/2)*Dy)/2 - cos(beta)*cos(gamma)*(dx/2 - (3**(1/2)*dy)/2) + cos(beta)*sin(gamma)*(dy/2 + (3**(1/2)*dx)/2))**2 + (Dy/2 + y + (3**(1/2)*Dx)/2 - (cos(alpha)*sin(gamma) + cos(gamma)*sin(alpha)*sin(beta))*(dx/2 - (3**(1/2)*dy)/2) - (cos(alpha)*cos(gamma) - sin(alpha)*sin(beta)*sin(gamma))*(dy/2 + (3**(1/2)*dx)/2))**2 + l1**2 - l2**2)*(Dx/2 + x - (3**(1/2)*Dy)/2 + 3**(1/2)*(Dy/2 + y + (3**(1/2)*Dx)/2 - (cos(alpha)*sin(gamma) + cos(gamma)*sin(alpha)*sin(beta))*(dx/2 - (3**(1/2)*dy)/2) - (cos(alpha)*cos(gamma) - sin(alpha)*sin(beta)*sin(gamma))*(dy/2 + (3**(1/2)*dx)/2)) - cos(beta)*cos(gamma)*(dx/2 - (3**(1/2)*dy)/2) + cos(beta)*sin(gamma)*(dy/2 + (3**(1/2)*dx)/2)))/l1)/((2*(cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma))*(dy/2 + (3**(1/2)*dx)/2) - 2*z + 2*(sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta))*(dx/2 - (3**(1/2)*dy)/2))**2 + (Dx/2 + x - (3**(1/2)*Dy)/2 + 3**(1/2)*(Dy/2 + y + (3**(1/2)*Dx)/2 - (cos(alpha)*sin(gamma) + cos(gamma)*sin(alpha)*sin(beta))*(dx/2 - (3**(1/2)*dy)/2) - (cos(alpha)*cos(gamma) - sin(alpha)*sin(beta)*sin(gamma))*(dy/2 + (3**(1/2)*dx)/2)) - cos(beta)*cos(gamma)*(dx/2 - (3**(1/2)*dy)/2) + cos(beta)*sin(gamma)*(dy/2 + (3**(1/2)*dx)/2))**2) + ((2*((((2*(cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma))*(dy/2 + (3**(1/2)*dx)/2) - 2*z + 2*(sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta))*(dx/2 - (3**(1/2)*dy)/2))**2 - (((cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma))*(dy/2 + (3**(1/2)*dx)/2) - z + (sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta))*(dx/2 - (3**(1/2)*dy)/2))**2 + (Dx/2 + x - (3**(1/2)*Dy)/2 - cos(beta)*cos(gamma)*(dx/2 - (3**(1/2)*dy)/2) + cos(beta)*sin(gamma)*(dy/2 + (3**(1/2)*dx)/2))**2 + (Dy/2 + y + (3**(1/2)*Dx)/2 - (cos(alpha)*sin(gamma) + cos(gamma)*sin(alpha)*sin(beta))*(dx/2 - (3**(1/2)*dy)/2) - (cos(alpha)*cos(gamma) - sin(alpha)*sin(beta)*sin(gamma))*(dy/2 + (3**(1/2)*dx)/2))**2 + l1**2 - l2**2)**2/l1**2 + (Dx/2 + x - (3**(1/2)*Dy)/2 + 3**(1/2)*(Dy/2 + y + (3**(1/2)*Dx)/2 - (cos(alpha)*sin(gamma) + cos(gamma)*sin(alpha)*sin(beta))*(dx/2 - (3**(1/2)*dy)/2) - (cos(alpha)*cos(gamma) - sin(alpha)*sin(beta)*sin(gamma))*(dy/2 + (3**(1/2)*dx)/2)) - cos(beta)*cos(gamma)*(dx/2 - (3**(1/2)*dy)/2) + cos(beta)*sin(gamma)*(dy/2 + (3**(1/2)*dx)/2))**2)*(2*(cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma))*(dy/2 + (3**(1/2)*dx)/2) - 2*z + 2*(sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta))*(dx/2 - (3**(1/2)*dy)/2))**2)/4)**(1/2)*(Dx/2 + x - (3**(1/2)*Dy)/2 + 3**(1/2)*(Dy/2 + y + (3**(1/2)*Dx)/2 - (cos(alpha)*sin(gamma) + cos(gamma)*sin(alpha)*sin(beta))*(dx/2 - (3**(1/2)*dy)/2) - (cos(alpha)*cos(gamma) - sin(alpha)*sin(beta)*sin(gamma))*(dy/2 + (3**(1/2)*dx)/2)) - cos(beta)*cos(gamma)*(dx/2 - (3**(1/2)*dy)/2) + cos(beta)*sin(gamma)*(dy/2 + (3**(1/2)*dx)/2)) + ((2*(cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma))*(dy/2 + (3**(1/2)*dx)/2) - 2*z + 2*(sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta))*(dx/2 - (3**(1/2)*dy)/2))**2*(((cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma))*(dy/2 + (3**(1/2)*dx)/2) - z + (sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta))*(dx/2 - (3**(1/2)*dy)/2))**2 + (Dx/2 + x - (3**(1/2)*Dy)/2 - cos(beta)*cos(gamma)*(dx/2 - (3**(1/2)*dy)/2) + cos(beta)*sin(gamma)*(dy/2 + (3**(1/2)*dx)/2))**2 + (Dy/2 + y + (3**(1/2)*Dx)/2 - (cos(alpha)*sin(gamma) + cos(gamma)*sin(alpha)*sin(beta))*(dx/2 - (3**(1/2)*dy)/2) - (cos(alpha)*cos(gamma) - sin(alpha)*sin(beta)*sin(gamma))*(dy/2 + (3**(1/2)*dx)/2))**2 + l1**2 - l2**2))/l1)*j)/(((2*(cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma))*(dy/2 + (3**(1/2)*dx)/2) - 2*z + 2*(sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta))*(dx/2 - (3**(1/2)*dy)/2))**2 + (Dx/2 + x - (3**(1/2)*Dy)/2 + 3**(1/2)*(Dy/2 + y + (3**(1/2)*Dx)/2 - (cos(alpha)*sin(gamma) + cos(gamma)*sin(alpha)*sin(beta))*(dx/2 - (3**(1/2)*dy)/2) - (cos(alpha)*cos(gamma) - sin(alpha)*sin(beta)*sin(gamma))*(dy/2 + (3**(1/2)*dx)/2)) - cos(beta)*cos(gamma)*(dx/2 - (3**(1/2)*dy)/2) + cos(beta)*sin(gamma)*(dy/2 + (3**(1/2)*dx)/2))**2)*(2*(cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma))*(dy/2 + (3**(1/2)*dx)/2) - 2*z + 2*(sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta))*(dx/2 - (3**(1/2)*dy)/2))))
    theta_4 = np.angle((2*((((2*z + 2*(cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma))*(dy/2 - (3**(1/2)*dx)/2) - 2*(sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta))*(dx/2 + (3**(1/2)*dy)/2))**2 + (Dx/2 + x + (3**(1/2)*Dy)/2 + 3**(1/2)*(y - Dy/2 + (3**(1/2)*Dx)/2 - (cos(alpha)*sin(gamma) + cos(gamma)*sin(alpha)*sin(beta))*(dx/2 + (3**(1/2)*dy)/2) + (cos(alpha)*cos(gamma) - sin(alpha)*sin(beta)*sin(gamma))*(dy/2 - (3**(1/2)*dx)/2)) - cos(beta)*cos(gamma)*(dx/2 + (3**(1/2)*dy)/2) - cos(beta)*sin(gamma)*(dy/2 - (3**(1/2)*dx)/2))**2 - ((Dx/2 + x + (3**(1/2)*Dy)/2 - cos(beta)*cos(gamma)*(dx/2 + (3**(1/2)*dy)/2) - cos(beta)*sin(gamma)*(dy/2 - (3**(1/2)*dx)/2))**2 + (y - Dy/2 + (3**(1/2)*Dx)/2 - (cos(alpha)*sin(gamma) + cos(gamma)*sin(alpha)*sin(beta))*(dx/2 + (3**(1/2)*dy)/2) + (cos(alpha)*cos(gamma) - sin(alpha)*sin(beta)*sin(gamma))*(dy/2 - (3**(1/2)*dx)/2))**2 + l1**2 - l2**2 + (z + (cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma))*(dy/2 - (3**(1/2)*dx)/2) - (sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta))*(dx/2 + (3**(1/2)*dy)/2))**2)**2/l1**2)*(2*z + 2*(cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma))*(dy/2 - (3**(1/2)*dx)/2) - 2*(sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta))*(dx/2 + (3**(1/2)*dy)/2))**2)/4)**(1/2) - (((Dx/2 + x + (3**(1/2)*Dy)/2 - cos(beta)*cos(gamma)*(dx/2 + (3**(1/2)*dy)/2) - cos(beta)*sin(gamma)*(dy/2 - (3**(1/2)*dx)/2))**2 + (y - Dy/2 + (3**(1/2)*Dx)/2 - (cos(alpha)*sin(gamma) + cos(gamma)*sin(alpha)*sin(beta))*(dx/2 + (3**(1/2)*dy)/2) + (cos(alpha)*cos(gamma) - sin(alpha)*sin(beta)*sin(gamma))*(dy/2 - (3**(1/2)*dx)/2))**2 + l1**2 - l2**2 + (z + (cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma))*(dy/2 - (3**(1/2)*dx)/2) - (sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta))*(dx/2 + (3**(1/2)*dy)/2))**2)*(Dx/2 + x + (3**(1/2)*Dy)/2 + 3**(1/2)*(y - Dy/2 + (3**(1/2)*Dx)/2 - (cos(alpha)*sin(gamma) + cos(gamma)*sin(alpha)*sin(beta))*(dx/2 + (3**(1/2)*dy)/2) + (cos(alpha)*cos(gamma) - sin(alpha)*sin(beta)*sin(gamma))*(dy/2 - (3**(1/2)*dx)/2)) - cos(beta)*cos(gamma)*(dx/2 + (3**(1/2)*dy)/2) - cos(beta)*sin(gamma)*(dy/2 - (3**(1/2)*dx)/2)))/l1)/((2*z + 2*(cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma))*(dy/2 - (3**(1/2)*dx)/2) - 2*(sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta))*(dx/2 + (3**(1/2)*dy)/2))**2 + (Dx/2 + x + (3**(1/2)*Dy)/2 + 3**(1/2)*(y - Dy/2 + (3**(1/2)*Dx)/2 - (cos(alpha)*sin(gamma) + cos(gamma)*sin(alpha)*sin(beta))*(dx/2 + (3**(1/2)*dy)/2) + (cos(alpha)*cos(gamma) - sin(alpha)*sin(beta)*sin(gamma))*(dy/2 - (3**(1/2)*dx)/2)) - cos(beta)*cos(gamma)*(dx/2 + (3**(1/2)*dy)/2) - cos(beta)*sin(gamma)*(dy/2 - (3**(1/2)*dx)/2))**2) - ((2*((((2*z + 2*(cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma))*(dy/2 - (3**(1/2)*dx)/2) - 2*(sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta))*(dx/2 + (3**(1/2)*dy)/2))**2 + (Dx/2 + x + (3**(1/2)*Dy)/2 + 3**(1/2)*(y - Dy/2 + (3**(1/2)*Dx)/2 - (cos(alpha)*sin(gamma) + cos(gamma)*sin(alpha)*sin(beta))*(dx/2 + (3**(1/2)*dy)/2) + (cos(alpha)*cos(gamma) - sin(alpha)*sin(beta)*sin(gamma))*(dy/2 - (3**(1/2)*dx)/2)) - cos(beta)*cos(gamma)*(dx/2 + (3**(1/2)*dy)/2) - cos(beta)*sin(gamma)*(dy/2 - (3**(1/2)*dx)/2))**2 - ((Dx/2 + x + (3**(1/2)*Dy)/2 - cos(beta)*cos(gamma)*(dx/2 + (3**(1/2)*dy)/2) - cos(beta)*sin(gamma)*(dy/2 - (3**(1/2)*dx)/2))**2 + (y - Dy/2 + (3**(1/2)*Dx)/2 - (cos(alpha)*sin(gamma) + cos(gamma)*sin(alpha)*sin(beta))*(dx/2 + (3**(1/2)*dy)/2) + (cos(alpha)*cos(gamma) - sin(alpha)*sin(beta)*sin(gamma))*(dy/2 - (3**(1/2)*dx)/2))**2 + l1**2 - l2**2 + (z + (cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma))*(dy/2 - (3**(1/2)*dx)/2) - (sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta))*(dx/2 + (3**(1/2)*dy)/2))**2)**2/l1**2)*(2*z + 2*(cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma))*(dy/2 - (3**(1/2)*dx)/2) - 2*(sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta))*(dx/2 + (3**(1/2)*dy)/2))**2)/4)**(1/2)*(Dx/2 + x + (3**(1/2)*Dy)/2 + 3**(1/2)*(y - Dy/2 + (3**(1/2)*Dx)/2 - (cos(alpha)*sin(gamma) + cos(gamma)*sin(alpha)*sin(beta))*(dx/2 + (3**(1/2)*dy)/2) + (cos(alpha)*cos(gamma) - sin(alpha)*sin(beta)*sin(gamma))*(dy/2 - (3**(1/2)*dx)/2)) - cos(beta)*cos(gamma)*(dx/2 + (3**(1/2)*dy)/2) - cos(beta)*sin(gamma)*(dy/2 - (3**(1/2)*dx)/2)) + ((2*z + 2*(cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma))*(dy/2 - (3**(1/2)*dx)/2) - 2*(sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta))*(dx/2 + (3**(1/2)*dy)/2))**2*((Dx/2 + x + (3**(1/2)*Dy)/2 - cos(beta)*cos(gamma)*(dx/2 + (3**(1/2)*dy)/2) - cos(beta)*sin(gamma)*(dy/2 - (3**(1/2)*dx)/2))**2 + (y - Dy/2 + (3**(1/2)*Dx)/2 - (cos(alpha)*sin(gamma) + cos(gamma)*sin(alpha)*sin(beta))*(dx/2 + (3**(1/2)*dy)/2) + (cos(alpha)*cos(gamma) - sin(alpha)*sin(beta)*sin(gamma))*(dy/2 - (3**(1/2)*dx)/2))**2 + l1**2 - l2**2 + (z + (cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma))*(dy/2 - (3**(1/2)*dx)/2) - (sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta))*(dx/2 + (3**(1/2)*dy)/2))**2))/l1)*j)/(((2*z + 2*(cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma))*(dy/2 - (3**(1/2)*dx)/2) - 2*(sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta))*(dx/2 + (3**(1/2)*dy)/2))**2 + (Dx/2 + x + (3**(1/2)*Dy)/2 + 3**(1/2)*(y - Dy/2 + (3**(1/2)*Dx)/2 - (cos(alpha)*sin(gamma) + cos(gamma)*sin(alpha)*sin(beta))*(dx/2 + (3**(1/2)*dy)/2) + (cos(alpha)*cos(gamma) - sin(alpha)*sin(beta)*sin(gamma))*(dy/2 - (3**(1/2)*dx)/2)) - cos(beta)*cos(gamma)*(dx/2 + (3**(1/2)*dy)/2) - cos(beta)*sin(gamma)*(dy/2 - (3**(1/2)*dx)/2))**2)*(2*z + 2*(cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma))*(dy/2 - (3**(1/2)*dx)/2) - 2*(sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta))*(dx/2 + (3**(1/2)*dy)/2))))
    theta_5 = np.angle((2*((((2*(cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma))*(dy/2 - (3**(1/2)*dx)/2) - 2*z + 2*(sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta))*(dx/2 + (3**(1/2)*dy)/2))**2 - (((cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma))*(dy/2 - (3**(1/2)*dx)/2) - z + (sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta))*(dx/2 + (3**(1/2)*dy)/2))**2 + (Dx/2 + x + (3**(1/2)*Dy)/2 - cos(beta)*cos(gamma)*(dx/2 + (3**(1/2)*dy)/2) + cos(beta)*sin(gamma)*(dy/2 - (3**(1/2)*dx)/2))**2 + l1**2 - l2**2 + ((3**(1/2)*Dx)/2 - y - Dy/2 + (cos(alpha)*sin(gamma) + cos(gamma)*sin(alpha)*sin(beta))*(dx/2 + (3**(1/2)*dy)/2) + (cos(alpha)*cos(gamma) - sin(alpha)*sin(beta)*sin(gamma))*(dy/2 - (3**(1/2)*dx)/2))**2)**2/l1**2 + (Dx/2 + x + (3**(1/2)*Dy)/2 + 3**(1/2)*((3**(1/2)*Dx)/2 - y - Dy/2 + (cos(alpha)*sin(gamma) + cos(gamma)*sin(alpha)*sin(beta))*(dx/2 + (3**(1/2)*dy)/2) + (cos(alpha)*cos(gamma) - sin(alpha)*sin(beta)*sin(gamma))*(dy/2 - (3**(1/2)*dx)/2)) - cos(beta)*cos(gamma)*(dx/2 + (3**(1/2)*dy)/2) + cos(beta)*sin(gamma)*(dy/2 - (3**(1/2)*dx)/2))**2)*(2*(cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma))*(dy/2 - (3**(1/2)*dx)/2) - 2*z + 2*(sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta))*(dx/2 + (3**(1/2)*dy)/2))**2)/4)**(1/2) - ((((cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma))*(dy/2 - (3**(1/2)*dx)/2) - z + (sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta))*(dx/2 + (3**(1/2)*dy)/2))**2 + (Dx/2 + x + (3**(1/2)*Dy)/2 - cos(beta)*cos(gamma)*(dx/2 + (3**(1/2)*dy)/2) + cos(beta)*sin(gamma)*(dy/2 - (3**(1/2)*dx)/2))**2 + l1**2 - l2**2 + ((3**(1/2)*Dx)/2 - y - Dy/2 + (cos(alpha)*sin(gamma) + cos(gamma)*sin(alpha)*sin(beta))*(dx/2 + (3**(1/2)*dy)/2) + (cos(alpha)*cos(gamma) - sin(alpha)*sin(beta)*sin(gamma))*(dy/2 - (3**(1/2)*dx)/2))**2)*(Dx/2 + x + (3**(1/2)*Dy)/2 + 3**(1/2)*((3**(1/2)*Dx)/2 - y - Dy/2 + (cos(alpha)*sin(gamma) + cos(gamma)*sin(alpha)*sin(beta))*(dx/2 + (3**(1/2)*dy)/2) + (cos(alpha)*cos(gamma) - sin(alpha)*sin(beta)*sin(gamma))*(dy/2 - (3**(1/2)*dx)/2)) - cos(beta)*cos(gamma)*(dx/2 + (3**(1/2)*dy)/2) + cos(beta)*sin(gamma)*(dy/2 - (3**(1/2)*dx)/2)))/l1)/((2*(cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma))*(dy/2 - (3**(1/2)*dx)/2) - 2*z + 2*(sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta))*(dx/2 + (3**(1/2)*dy)/2))**2 + (Dx/2 + x + (3**(1/2)*Dy)/2 + 3**(1/2)*((3**(1/2)*Dx)/2 - y - Dy/2 + (cos(alpha)*sin(gamma) + cos(gamma)*sin(alpha)*sin(beta))*(dx/2 + (3**(1/2)*dy)/2) + (cos(alpha)*cos(gamma) - sin(alpha)*sin(beta)*sin(gamma))*(dy/2 - (3**(1/2)*dx)/2)) - cos(beta)*cos(gamma)*(dx/2 + (3**(1/2)*dy)/2) + cos(beta)*sin(gamma)*(dy/2 - (3**(1/2)*dx)/2))**2) + ((2*((((2*(cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma))*(dy/2 - (3**(1/2)*dx)/2) - 2*z + 2*(sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta))*(dx/2 + (3**(1/2)*dy)/2))**2 - (((cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma))*(dy/2 - (3**(1/2)*dx)/2) - z + (sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta))*(dx/2 + (3**(1/2)*dy)/2))**2 + (Dx/2 + x + (3**(1/2)*Dy)/2 - cos(beta)*cos(gamma)*(dx/2 + (3**(1/2)*dy)/2) + cos(beta)*sin(gamma)*(dy/2 - (3**(1/2)*dx)/2))**2 + l1**2 - l2**2 + ((3**(1/2)*Dx)/2 - y - Dy/2 + (cos(alpha)*sin(gamma) + cos(gamma)*sin(alpha)*sin(beta))*(dx/2 + (3**(1/2)*dy)/2) + (cos(alpha)*cos(gamma) - sin(alpha)*sin(beta)*sin(gamma))*(dy/2 - (3**(1/2)*dx)/2))**2)**2/l1**2 + (Dx/2 + x + (3**(1/2)*Dy)/2 + 3**(1/2)*((3**(1/2)*Dx)/2 - y - Dy/2 + (cos(alpha)*sin(gamma) + cos(gamma)*sin(alpha)*sin(beta))*(dx/2 + (3**(1/2)*dy)/2) + (cos(alpha)*cos(gamma) - sin(alpha)*sin(beta)*sin(gamma))*(dy/2 - (3**(1/2)*dx)/2)) - cos(beta)*cos(gamma)*(dx/2 + (3**(1/2)*dy)/2) + cos(beta)*sin(gamma)*(dy/2 - (3**(1/2)*dx)/2))**2)*(2*(cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma))*(dy/2 - (3**(1/2)*dx)/2) - 2*z + 2*(sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta))*(dx/2 + (3**(1/2)*dy)/2))**2)/4)**(1/2)*(Dx/2 + x + (3**(1/2)*Dy)/2 + 3**(1/2)*((3**(1/2)*Dx)/2 - y - Dy/2 + (cos(alpha)*sin(gamma) + cos(gamma)*sin(alpha)*sin(beta))*(dx/2 + (3**(1/2)*dy)/2) + (cos(alpha)*cos(gamma) - sin(alpha)*sin(beta)*sin(gamma))*(dy/2 - (3**(1/2)*dx)/2)) - cos(beta)*cos(gamma)*(dx/2 + (3**(1/2)*dy)/2) + cos(beta)*sin(gamma)*(dy/2 - (3**(1/2)*dx)/2)) + ((2*(cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma))*(dy/2 - (3**(1/2)*dx)/2) - 2*z + 2*(sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta))*(dx/2 + (3**(1/2)*dy)/2))**2*(((cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma))*(dy/2 - (3**(1/2)*dx)/2) - z + (sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta))*(dx/2 + (3**(1/2)*dy)/2))**2 + (Dx/2 + x + (3**(1/2)*Dy)/2 - cos(beta)*cos(gamma)*(dx/2 + (3**(1/2)*dy)/2) + cos(beta)*sin(gamma)*(dy/2 - (3**(1/2)*dx)/2))**2 + l1**2 - l2**2 + ((3**(1/2)*Dx)/2 - y - Dy/2 + (cos(alpha)*sin(gamma) + cos(gamma)*sin(alpha)*sin(beta))*(dx/2 + (3**(1/2)*dy)/2) + (cos(alpha)*cos(gamma) - sin(alpha)*sin(beta)*sin(gamma))*(dy/2 - (3**(1/2)*dx)/2))**2))/l1)*j)/(((2*(cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma))*(dy/2 - (3**(1/2)*dx)/2) - 2*z + 2*(sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta))*(dx/2 + (3**(1/2)*dy)/2))**2 + (Dx/2 + x + (3**(1/2)*Dy)/2 + 3**(1/2)*((3**(1/2)*Dx)/2 - y - Dy/2 + (cos(alpha)*sin(gamma) + cos(gamma)*sin(alpha)*sin(beta))*(dx/2 + (3**(1/2)*dy)/2) + (cos(alpha)*cos(gamma) - sin(alpha)*sin(beta)*sin(gamma))*(dy/2 - (3**(1/2)*dx)/2)) - cos(beta)*cos(gamma)*(dx/2 + (3**(1/2)*dy)/2) + cos(beta)*sin(gamma)*(dy/2 - (3**(1/2)*dx)/2))**2)*(2*(cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma))*(dy/2 - (3**(1/2)*dx)/2) - 2*z + 2*(sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta))*(dx/2 + (3**(1/2)*dy)/2))))
    theta_6 = np.angle((2*((((2*z + 2*(cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma))*(dy/2 + (3**(1/2)*dx)/2) - 2*(sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta))*(dx/2 - (3**(1/2)*dy)/2))**2 - (((3**(1/2)*Dy)/2 - x - Dx/2 + cos(beta)*cos(gamma)*(dx/2 - (3**(1/2)*dy)/2) + cos(beta)*sin(gamma)*(dy/2 + (3**(1/2)*dx)/2))**2 + l1**2 - l2**2 + (z + (cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma))*(dy/2 + (3**(1/2)*dx)/2) - (sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta))*(dx/2 - (3**(1/2)*dy)/2))**2 + (Dy/2 - y + (3**(1/2)*Dx)/2 + (cos(alpha)*sin(gamma) + cos(gamma)*sin(alpha)*sin(beta))*(dx/2 - (3**(1/2)*dy)/2) - (cos(alpha)*cos(gamma) - sin(alpha)*sin(beta)*sin(gamma))*(dy/2 + (3**(1/2)*dx)/2))**2)**2/l1**2 + (Dx/2 + x - (3**(1/2)*Dy)/2 + 3**(1/2)*(Dy/2 - y + (3**(1/2)*Dx)/2 + (cos(alpha)*sin(gamma) + cos(gamma)*sin(alpha)*sin(beta))*(dx/2 - (3**(1/2)*dy)/2) - (cos(alpha)*cos(gamma) - sin(alpha)*sin(beta)*sin(gamma))*(dy/2 + (3**(1/2)*dx)/2)) - cos(beta)*cos(gamma)*(dx/2 - (3**(1/2)*dy)/2) - cos(beta)*sin(gamma)*(dy/2 + (3**(1/2)*dx)/2))**2)*(2*z + 2*(cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma))*(dy/2 + (3**(1/2)*dx)/2) - 2*(sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta))*(dx/2 - (3**(1/2)*dy)/2))**2)/4)**(1/2) - ((((3**(1/2)*Dy)/2 - x - Dx/2 + cos(beta)*cos(gamma)*(dx/2 - (3**(1/2)*dy)/2) + cos(beta)*sin(gamma)*(dy/2 + (3**(1/2)*dx)/2))**2 + l1**2 - l2**2 + (z + (cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma))*(dy/2 + (3**(1/2)*dx)/2) - (sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta))*(dx/2 - (3**(1/2)*dy)/2))**2 + (Dy/2 - y + (3**(1/2)*Dx)/2 + (cos(alpha)*sin(gamma) + cos(gamma)*sin(alpha)*sin(beta))*(dx/2 - (3**(1/2)*dy)/2) - (cos(alpha)*cos(gamma) - sin(alpha)*sin(beta)*sin(gamma))*(dy/2 + (3**(1/2)*dx)/2))**2)*(Dx/2 + x - (3**(1/2)*Dy)/2 + 3**(1/2)*(Dy/2 - y + (3**(1/2)*Dx)/2 + (cos(alpha)*sin(gamma) + cos(gamma)*sin(alpha)*sin(beta))*(dx/2 - (3**(1/2)*dy)/2) - (cos(alpha)*cos(gamma) - sin(alpha)*sin(beta)*sin(gamma))*(dy/2 + (3**(1/2)*dx)/2)) - cos(beta)*cos(gamma)*(dx/2 - (3**(1/2)*dy)/2) - cos(beta)*sin(gamma)*(dy/2 + (3**(1/2)*dx)/2)))/l1)/((2*z + 2*(cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma))*(dy/2 + (3**(1/2)*dx)/2) - 2*(sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta))*(dx/2 - (3**(1/2)*dy)/2))**2 + (Dx/2 + x - (3**(1/2)*Dy)/2 + 3**(1/2)*(Dy/2 - y + (3**(1/2)*Dx)/2 + (cos(alpha)*sin(gamma) + cos(gamma)*sin(alpha)*sin(beta))*(dx/2 - (3**(1/2)*dy)/2) - (cos(alpha)*cos(gamma) - sin(alpha)*sin(beta)*sin(gamma))*(dy/2 + (3**(1/2)*dx)/2)) - cos(beta)*cos(gamma)*(dx/2 - (3**(1/2)*dy)/2) - cos(beta)*sin(gamma)*(dy/2 + (3**(1/2)*dx)/2))**2) - ((2*((((2*z + 2*(cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma))*(dy/2 + (3**(1/2)*dx)/2) - 2*(sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta))*(dx/2 - (3**(1/2)*dy)/2))**2 - (((3**(1/2)*Dy)/2 - x - Dx/2 + cos(beta)*cos(gamma)*(dx/2 - (3**(1/2)*dy)/2) + cos(beta)*sin(gamma)*(dy/2 + (3**(1/2)*dx)/2))**2 + l1**2 - l2**2 + (z + (cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma))*(dy/2 + (3**(1/2)*dx)/2) - (sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta))*(dx/2 - (3**(1/2)*dy)/2))**2 + (Dy/2 - y + (3**(1/2)*Dx)/2 + (cos(alpha)*sin(gamma) + cos(gamma)*sin(alpha)*sin(beta))*(dx/2 - (3**(1/2)*dy)/2) - (cos(alpha)*cos(gamma) - sin(alpha)*sin(beta)*sin(gamma))*(dy/2 + (3**(1/2)*dx)/2))**2)**2/l1**2 + (Dx/2 + x - (3**(1/2)*Dy)/2 + 3**(1/2)*(Dy/2 - y + (3**(1/2)*Dx)/2 + (cos(alpha)*sin(gamma) + cos(gamma)*sin(alpha)*sin(beta))*(dx/2 - (3**(1/2)*dy)/2) - (cos(alpha)*cos(gamma) - sin(alpha)*sin(beta)*sin(gamma))*(dy/2 + (3**(1/2)*dx)/2)) - cos(beta)*cos(gamma)*(dx/2 - (3**(1/2)*dy)/2) - cos(beta)*sin(gamma)*(dy/2 + (3**(1/2)*dx)/2))**2)*(2*z + 2*(cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma))*(dy/2 + (3**(1/2)*dx)/2) - 2*(sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta))*(dx/2 - (3**(1/2)*dy)/2))**2)/4)**(1/2)*(Dx/2 + x - (3**(1/2)*Dy)/2 + 3**(1/2)*(Dy/2 - y + (3**(1/2)*Dx)/2 + (cos(alpha)*sin(gamma) + cos(gamma)*sin(alpha)*sin(beta))*(dx/2 - (3**(1/2)*dy)/2) - (cos(alpha)*cos(gamma) - sin(alpha)*sin(beta)*sin(gamma))*(dy/2 + (3**(1/2)*dx)/2)) - cos(beta)*cos(gamma)*(dx/2 - (3**(1/2)*dy)/2) - cos(beta)*sin(gamma)*(dy/2 + (3**(1/2)*dx)/2)) + ((2*z + 2*(cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma))*(dy/2 + (3**(1/2)*dx)/2) - 2*(sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta))*(dx/2 - (3**(1/2)*dy)/2))**2*(((3**(1/2)*Dy)/2 - x - Dx/2 + cos(beta)*cos(gamma)*(dx/2 - (3**(1/2)*dy)/2) + cos(beta)*sin(gamma)*(dy/2 + (3**(1/2)*dx)/2))**2 + l1**2 - l2**2 + (z + (cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma))*(dy/2 + (3**(1/2)*dx)/2) - (sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta))*(dx/2 - (3**(1/2)*dy)/2))**2 + (Dy/2 - y + (3**(1/2)*Dx)/2 + (cos(alpha)*sin(gamma) + cos(gamma)*sin(alpha)*sin(beta))*(dx/2 - (3**(1/2)*dy)/2) - (cos(alpha)*cos(gamma) - sin(alpha)*sin(beta)*sin(gamma))*(dy/2 + (3**(1/2)*dx)/2))**2))/l1)*j)/(((2*z + 2*(cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma))*(dy/2 + (3**(1/2)*dx)/2) - 2*(sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta))*(dx/2 - (3**(1/2)*dy)/2))**2 + (Dx/2 + x - (3**(1/2)*Dy)/2 + 3**(1/2)*(Dy/2 - y + (3**(1/2)*Dx)/2 + (cos(alpha)*sin(gamma) + cos(gamma)*sin(alpha)*sin(beta))*(dx/2 - (3**(1/2)*dy)/2) - (cos(alpha)*cos(gamma) - sin(alpha)*sin(beta)*sin(gamma))*(dy/2 + (3**(1/2)*dx)/2)) - cos(beta)*cos(gamma)*(dx/2 - (3**(1/2)*dy)/2) - cos(beta)*sin(gamma)*(dy/2 + (3**(1/2)*dx)/2))**2)*(2*z + 2*(cos(gamma)*sin(alpha) + cos(alpha)*sin(beta)*sin(gamma))*(dy/2 + (3**(1/2)*dx)/2) - 2*(sin(alpha)*sin(gamma) - cos(alpha)*cos(gamma)*sin(beta))*(dx/2 - (3**(1/2)*dy)/2))))


    return [theta_1, theta_2, theta_3, theta_4, theta_5, theta_6]


def for_kinematic(angles):
    """Forward kinematics of 6-RUS robot. This is done with a numeric solve (fsolve)

    `angles`: list of angles in the form of [θ1, θ2, θ3 θ4, θ5, θ6]

    `return`: list with pose in the form of [x, y, z, α, β, γ]"""
    
    anglesAsNpArray = np.array(angles)  # convert to numpy array to subtract from another array
    
    # create function to minimize
    def func(X, H1 = anglesAsNpArray):
        """This function returns the difference between the current position (`H1`) and a guess (`X`).
        It is used for the numeric fsolve."""

        #motorAngles = inv_kinematic(X[0], X[1], X[2], X[3], X[4], X[5])
        motorAngles = inv_kinematic(X)
        H2 = np.array(motorAngles)

        difference = H1 - H2  # calculate the difference between calulated and real angles

        return difference
    
    # initial guess/startingvalue
    x_0 = [0.0, 0.0, -100.0, 0.0, 0.0, 0.0]

    curr_pose = fsolve(func, x_0)  # solve numerically with initial guess

    return list(curr_pose)



if __name__ == '__main__':
    from math import degrees, radians

    ### inverse kinematica test
    # x = -15
    # y = -35
    # z = -(150-23)+40
    # alpha = 0
    # beta = 0
    # gamma = 0  # radians(30)

    x = 0
    y = 0
    z = -127.54608422867989 # -(150-23)
    alpha = 0
    beta = 0
    gamma = 0  # radians(30)


    test = inv_kinematic([x, y, z, alpha, beta, gamma])

    test = [degrees(k) for k in test]

    print(test)

    ### forward kinematics test
    angles = [90, 90, 90, 90, 90, 90]
    angles = [radians(k) for k in angles]

    test = for_kinematic(angles)

    print(test)